# Generated by Django 4.2 on 2023-05-15 20:01

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('given_name', models.CharField(max_length=50, null=True)),
                ('middle_name', models.CharField(max_length=100, null=True)),
                ('surname', models.CharField(max_length=50)),
                ('suffix', models.CharField(max_length=15, null=True)),
                ('title', models.CharField(max_length=15, null=True)),
                ('display_name', models.CharField(max_length=300)),
                ('birth_year', models.SmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(2023)])),
                ('birth_month', models.SmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('birth_day', models.SmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('death_year', models.SmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(2023)])),
                ('death_month', models.SmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('death_day', models.SmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('pseudonym_for', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='book_club.author')),
            ],
        ),
        migrations.CreateModel(
            name='BookClub',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('disbanded', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('given_name', models.CharField(max_length=50, null=True)),
                ('middle_name', models.CharField(max_length=100, null=True)),
                ('surname', models.CharField(max_length=50, null=True)),
                ('suffix', models.CharField(max_length=15, null=True)),
                ('title', models.CharField(max_length=15, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('left', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('book_clubs', models.ManyToManyField(to='book_club.bookclub')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('published_year', models.SmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(2023)])),
                ('published_month', models.SmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('published_day', models.SmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='book_club.author')),
                ('genres', models.ManyToManyField(to='book_club.genre')),
            ],
            options={
                'unique_together': {('title', 'author')},
            },
        ),
    ]
